{"version":3,"file":"index.js","sources":["../src/index.tsx"],"sourcesContent":["import * as CSS from 'csstype'\n\nimport styled from 'styled-components'\n\nimport {\n  typography,\n  space,\n  color,\n  position,\n  layout,\n  flexbox,\n  border,\n  shadow,\n  TypographyProps,\n  SpaceProps,\n  ColorProps,\n  PositionProps,\n  LayoutProps,\n  FlexboxProps,\n  BorderProps,\n  system,\n  ResponsiveValue,\n  ShadowProps\n} from 'styled-system'\n\nexport const BREAKPOINTS = {\n  xs: 0,\n  sm: '480px',\n  md: '768px',\n  lg: '1024px'\n}\n\nexport type StyledSystemProps = TypographyProps &\n  SpaceProps &\n  ColorProps &\n  PositionProps &\n  LayoutProps\n\nexport const GridBase = styled.section<StyledSystemProps>`\n    ${space}\n    ${typography}\n    ${color}\n    ${position}\n    ${layout}\n`\n\nexport const CellBase = styled.div<StyledSystemProps>`\n    ${space}\n    ${typography}\n    ${color}\n    ${position}\n    ${layout}\n`\n\nexport type BoxProps = StyledSystemProps &\n  FlexboxProps &\n  BorderProps &\n  PositionProps &\n  ShadowProps\n\nexport const Box = styled.div<BoxProps>`\n    ${space}\n    ${typography}\n    ${color}\n    ${position}\n    ${layout}\n    ${flexbox}\n    ${border}\n    ${position}\n    ${shadow}\n`\n\nconst flowResolver = (flow = 'row') => flow\nconst rowsColumnsResolver = (cols = 12) =>\n  typeof cols === 'number' ? `repeat(${cols}, 1fr)` : cols\n\ntype StyledGridProps = {\n  gap: ResponsiveValue<string>\n  rowGap: ResponsiveValue<string>\n  columnGap: ResponsiveValue<string>\n  alignItems: ResponsiveValue<string>\n  alignContent: ResponsiveValue<string>\n  justifyItems: ResponsiveValue<string>\n  justifyContent: ResponsiveValue<string>\n  cols: ResponsiveValue<number | string>\n  rows: ResponsiveValue<number | string>\n  flow: ResponsiveValue<string>\n  areas: ResponsiveValue<string[]>\n}\n\ntype Transform = (value: any) => string | number\n\nfunction createStyledProp(\n  propName: string,\n  cssPropName: keyof CSS.PropertiesHyphen,\n  transform?: Transform\n) {\n  return {\n    [propName]: {\n      property: cssPropName,\n      transform\n    }\n  }\n}\n\ntype StyledPropType = string | { propName: string; transform?: Transform }\n\nfunction createStyledProps(\n  config: { [key in keyof CSS.PropertiesHyphen]: StyledPropType }\n) {\n  const systemConfig = Object.entries(config).reduce(\n    (acc, [cssPropName, prop]) => ({\n      ...acc,\n      // @ts-ignore\n      ...createStyledProp(...spreadProps(cssPropName, prop))\n    }),\n    {}\n  )\n  return system(systemConfig)\n\n  function spreadProps(\n    cssPropName: keyof CSS.PropertiesHyphen,\n    prop: StyledPropType\n  ) {\n    return typeof prop === 'string'\n      ? [prop, cssPropName]\n      : [prop.propName, cssPropName, prop.transform]\n  }\n}\n\nconst formatAreas = (areas: string[]) =>\n  areas.map((area) => `\"${area}\"`).join(' ')\n\nexport const Grid = styled(GridBase)<Partial<StyledGridProps>>`\n  display: grid;\n  ${createStyledProps({\n    gap: 'gap',\n    'grid-row-gap': 'rowGap',\n    'grid-column-gap': 'columnGap',\n    'align-items': 'alignItems',\n    'align-content': 'alignContent',\n    'justify-items': 'justifyItems',\n    'justify-content': 'justifyContent',\n    'grid-template-areas': {\n      propName: 'areas',\n      transform: (areas: string[]) => formatAreas(areas)\n    },\n    'grid-auto-flow': {\n      propName: 'flow',\n      transform: flowResolver\n    },\n    'grid-template-columns': {\n      propName: 'cols',\n      transform: rowsColumnsResolver\n    },\n    'grid-template-rows': {\n      propName: 'rows',\n      transform: rowsColumnsResolver\n    }\n  })}\n`\n\ntype CellProps = {\n  area: ResponsiveValue<string>\n  'x-offset': ResponsiveValue<string>\n  'x-span': ResponsiveValue<string>\n  'y-offset': ResponsiveValue<string>\n  'y-span': ResponsiveValue<string>\n}\n\nexport const Cell = styled(CellBase)<Partial<CellProps>>`\n  ${createStyledProps({\n    'grid-area': 'area',\n    'grid-column-start': 'x-offset',\n    'grid-row-start': 'y-offset',\n    'grid-column-end': {\n      propName: 'x-span',\n      transform: (span: number | string) => `span ${span}`\n    },\n    'grid-row-end': {\n      propName: 'y-span',\n      transform: (span: number | string) => `span ${span}`\n    }\n  })}\n`\n"],"names":["BREAKPOINTS","xs","sm","md","lg","GridBase","styled","section","space","typography","color","position","layout","CellBase","div","Box","flexbox","border","shadow","flowResolver","flow","rowsColumnsResolver","cols","createStyledProp","propName","cssPropName","transform","property","createStyledProps","config","systemConfig","Object","entries","reduce","acc","prop","spreadProps","system","formatAreas","areas","map","area","join","Grid","gap","Cell","span"],"mappings":"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"}